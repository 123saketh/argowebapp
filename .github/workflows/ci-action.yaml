name: Build Step # The name of your workflow, which appears in GitHub checks

on:
  # This 'push' trigger runs the full CI/CD pipeline (including Docker push and manifest update)
  # after a successful merge or direct push to 'main'.
  push:
    branches: ['main']

  # This 'pull_request' trigger is for the mandatory pre-merge checks.
  # It runs the 'build' and 'test-stage' jobs when a PR is opened or updated targeting 'main'.
  pull_request:
    branches: [ "main" ] # This targets PRs *into* the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [v18.17.0]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present

  test-stage:
    runs-on: ubuntu-latest
    needs: build # Ensures tests run after a successful build
    steps:
      - name: Running Tests
        uses: actions/checkout@v3
      - run: echo "running tests..." # Replace with your actual test command (e.g., npm test)

  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    needs: ['build', 'test-stage'] # This job requires build and test-stage to succeed.
    # This 'if' condition ensures this job ONLY runs on 'push' events
    # to the 'main' branch, NOT on 'pull_request' events.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Concurrency group to prevent multiple concurrent deployments for the 'main' branch.
    # Only one workflow run in this group can be in progress at a time.
    # New runs will automatically cancel older, currently running jobs in the same group.
    concurrency:
      group: ${{ github.workflow }}-main-deployment
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.ARGO_USER }}
          password: ${{ secrets.G_TOKEN }}
      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        id: docker_build # Add an ID to reference outputs
        with:
          context: ./
          tags: |
            123saketh/argoreactapp:${{ github.sha }}
            ghcr.io/123saketh/argoreactapp:${{ github.sha }}
          push: true # 'push' is now controlled by the job's 'if' condition and concurrency
          build-args: |
            PUBLIC_URL=/react-app
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  update-manifest-stage:
    runs-on: ubuntu-latest
    needs: ['build-and-push-docker-image'] # This job depends on the Docker image push passing.
    # This 'if' condition ensures this job ONLY runs on 'push' events
    # to the 'main' branch, NOT on 'pull_request' events.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Use the same concurrency group to ensure manifest updates are also serialized
    concurrency:
      group: ${{ github.workflow }}-main-deployment
      cancel-in-progress: true

    steps:
      - name: Checkout ArgoInfra Repository
        uses: actions/checkout@v3
        with:
          repository: 123saketh/argoinfra
          ref: 'main' # Assuming ArgoInfra's main is where manifests are
          token: ${{ secrets.G_TOKEN }}
      - name: Setup Git Config
        run: |
          git config --global user.email "${{secrets.ARGO_EMAIL}}"
          git config --global user.name "${{secrets.ARGO_USER}}"

      - name: Update Deployment YAML
        id: update_deployment_yaml # Add an ID for potential conditional steps
        run: |
          echo "Current workflow SHA: ${{ github.sha }}"
          # Extract currently deployed SHA from the manifest.
          # Adjust the grep/sed pattern if the image URL changes.
          CURRENT_DEPLOYED_IMAGE_LINE=$(grep "123saketh/argoreactapp:" react-app/deployment.yaml || true) # '|| true' prevents error if line not found
          CURRENT_DEPLOYED_SHA=""
          if [[ -n "$CURRENT_DEPLOYED_IMAGE_LINE" ]]; then
            CURRENT_DEPLOYED_SHA=$(echo "$CURRENT_DEPLOYED_IMAGE_LINE" | sed -n 's/.*argoreactapp:\([^#]*\).*/\1/p')
          fi

          echo "Currently deployed SHA in manifest: $CURRENT_DEPLOYED_SHA"

          # Simple comparison: if our SHA is older than or equal to the one already deployed, skip.
          # This relies on lexical comparison of SHAs, which generally works for linear history.
          if [ -n "$CURRENT_DEPLOYED_SHA" ] && [ "${{ github.sha }}" < "$CURRENT_DEPLOYED_SHA" ]; then
            echo "Current workflow SHA (${{ github.sha }}) is older than currently deployed SHA ($CURRENT_DEPLOYED_SHA). Skipping manifest update to prevent rollback."
            echo "::set-output name=skipped::true" # Set output to indicate skip
            exit 0 # Exit successfully to indicate no error, but skip the update
          else
            echo "Current workflow SHA (${{ github.sha }}) is newer than currently deployed SHA ($CURRENT_DEPLOYED_SHA) or no SHA found. Proceeding with update."
          fi

          # Perform the update
          sed -i "s#123saketh/argoreactapp:.*#123saketh/argoreactapp:${{ github.sha }}#g" react-app/deployment.yaml
          echo "::set-output name=skipped::false" # Set output to indicate update was performed

      - name: Commit and Push Changes
        # This step will only run if the manifest update was not skipped
        if: success() && steps.update_deployment_yaml.outputs.skipped != 'true'
        run: |
          git add -A
          git commit -am "Update image for - ${{ github.sha }}"
          git push origin main
